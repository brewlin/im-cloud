syntax = "proto3";

package im.logic;


import "cloud.proto";

/*
 * v2.0.0
 * protocol
 */
message PushMsg {
    enum Type {
        PUSH = 0;
        ROOM = 1;
        BROADCAST = 2;
    }
    Type type = 1;
    int32 operation = 2;
    int32 speed = 3;
    string server = 4;
    string room = 5;
    repeated string keys = 6;
    bytes msg = 7;
}

message CloseReply {
}

message CloseReq {
}

message PingReply {
}

message PingReq {
}

message ConnectReq {
    string server = 1;
    string cookie = 2;
    bytes token = 3;
}

message ConnectReply {
    int64 mid = 1;
    string key = 2;
    string roomID = 3;
    repeated int32 accepts = 4;
    int64 heartbeat = 5;
}

message DisconnectReq {
    int64 mid = 1;
    string key = 2;
    string server = 3;
}

message DisconnectReply {
    bool has = 1;
}

message HeartbeatReq {
    int64 mid = 1;
    string key = 2;
    string server = 3;
}

message HeartbeatReply {
}

message OnlineReq {
    string server = 1;
    map<string, int32> roomCount = 2;
}

message OnlineReply {
    map<string, int32> allRoomCount = 1;
}

message ReceiveReq {
    int64 mid = 1;
    cloud.Proto proto = 2;
}


message ReceiveReply {
}

message NodesReq {
	string platform = 1;
	string clientIP = 2;
}

message NodesReply {
	string domain = 1 ;
	int32 tcpPort = 2 ;
	int32 wsPort = 3 ;
	int32 wssPort = 4 ;
	int32 heartbeat = 5 ;
	repeated string nodes = 6 ;
	Backoff backoff = 7 ;
	int32 heartbeatMax = 8 ;
}

message Backoff {
	int32	MaxDelay = 1 ;
	int32	BaseDelay = 2 ;
	float	Factor = 3 ;
	float	Jitter = 4 ;
}
message PushKeysReq {
    repeated string keys = 1;
    bytes msg = 2;
}
message PushKeysReply {
}

message PushMidsReq {
    repeated string mids = 1;
    bytes msg = 2;
}
message PushMidsReply{
}

message PushRoomReq {
    string room = 1;
    string type = 2;
    bytes msg = 3;
}
message PushRoomReply{
}

message PushAllReq{
    bytes msg = 1;
}
message PushAllReply{
}


service Logic {
    // Ping Service
    rpc Ping(PingReq) returns(PingReply);
    // Close Service
    rpc CClose(CloseReq) returns(CloseReply);
    // Connect
    rpc Connect(ConnectReq) returns (ConnectReply);
    // Disconnect
    rpc Disconnect(DisconnectReq) returns (DisconnectReply);
    // Heartbeat
    rpc Heartbeat(HeartbeatReq) returns (HeartbeatReply);
    // RenewOnline
    rpc RenewOnline(OnlineReq) returns (OnlineReply);
    // Receive
    rpc Receive(ReceiveReq) returns (ReceiveReply);
	//ServerList
	rpc Nodes(NodesReq) returns (NodesReply);

    //PushKeys push by key
    rpc PushKeys(PushKeysReq) returns (PushKeysReply);
    // PushMids push by mids
    rpc PushMids(PushMidsReq) returns (PushMidsReply);
    // BroadcastRoom broadcast to one room
    rpc PushRoom(PushRoomReq) returns (PushRoomReply);
    // Boradcast broadcast all of the server
    rpc PushAll(PushAllReq) returns (PushAllReply);
}
