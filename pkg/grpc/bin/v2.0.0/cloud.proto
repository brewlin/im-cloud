syntax = "proto3";

package im.cloud;


/*
 * v2.0.0
 * protocol
 */
message Proto {
    int32 ver = 1 ;
    int32 op = 2 ;
    int32 seq = 3;
    bytes body = 4 ;
}

message Empty{}

message PushMsgReq {
    repeated string keys = 1;
    int32 protoOp = 3;
    Proto proto = 2;
}

message PushMsgReply {}

message BroadcastReq{
    int32 protoOp = 1;
    Proto proto = 2;
    int32 speed = 3;
}

message BroadcastReply{}

message BroadcastRoomReq {
    string roomID = 1;
    Proto proto = 2;
}

message BroadcastRoomReply{}

message RoomsReq{}

message RoomsReply {
    map<string,bool> rooms = 1;
}
enum Operation {
    option allow_alias = true;
	// OpHandshake handshake
	OpHandshake = 0;
	// OpHandshakeReply handshake reply
	OpHandshakeReply = 1;

	// OpHeartbeat heartbeat
	OpHeartbeat = 2;
	// OpHeartbeatReply heartbeat reply
	OpHeartbeatReply = 3;

	// OpSendMsg send message.
	OpSendMsg = 4;
	// OpSendMsgReply  send message reply
	OpSendMsgReply = 5;

	// OpDisconnectReply disconnect reply
	OpDisconnectReply = 6;

	// OpAuth auth connnect
	OpAuth = 7;
	// OpAuthReply auth connect reply
	OpAuthReply = 8;

	// OpRaw raw message
	OpRaw = 9;

	// OpProtoReady proto ready
	OpProtoReady = 10;
	// OpProtoFinish proto finish
	OpProtoFinish = 1;

	// OpChangeRoom change room
	OpChangeRoom = 12;
	// OpChangeRoomReply change room reply
	OpChangeRoomReply = 13;

	// OpSub subscribe operation
	OpSub = 14;
	// OpSubReply subscribe operation
	OpSubReply = 15;

	// OpUnsub unsubscribe operation
	OpUnsub = 16;
	// OpUnsubReply unsubscribe operation reply
	OpUnsubReply = 17;

}

service Cloud {
    // Ping Service
    rpc Ping(Empty) returns(Empty);
    // Close Service
    rpc CClose(Empty) returns(Empty);
    //PushMsg push by key or mid
    rpc PushMsg(PushMsgReq) returns (PushMsgReply);
    // Broadcast send to every enrity
    rpc Broadcast(BroadcastReq) returns (BroadcastReply);
    // BroadcastRoom broadcast to one room
    rpc BroadcastRoom(BroadcastRoomReq) returns (BroadcastRoomReply);
    // Rooms get all rooms
    rpc Rooms(RoomsReq) returns (RoomsReply);
}
